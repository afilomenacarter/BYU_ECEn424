                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6f800000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c800000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Benjamin Bergeson
                            | # benbball
                            | 
                            | # 1. Moved constants 8 and 1 into separate registers so they don't have to be moved into r10 every loop.
                            | # 2. Moved order of instructions so the registers don't have to wait for values to be valid.
                            | # 3. Changed the initial check in the loop header to conditional jump to the Loop, which should be the default in almost all cases.
                            | # 4. Moved the incrementing of src an dst to a separte part that will not execute on the the last loop.
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6222                 |   andq    %rdx,%rdx		# len <= 0?
0x034: 50a70000000000000000 |   mrmovq  (%rdi), %r10	# read val from src...
0x03e: 30f00000000000000000 |   irmovq  $0,%rax
0x048: 768d00000000000000   |   jg      Loop
0x051: 70c100000000000000   | 	jmp     Done		    # if so, goto Done:
0x05a:                      | Inc:
0x05a: c0f60800000000000000 |   iaddq   $8, %rsi		  # dst++
0x064: c0f70800000000000000 |   iaddq   $8, %rdi		  # src++
0x06e: 62aa                 |   andq    %r10, %r10		# val <= 0?
0x070: 50a70000000000000000 |   mrmovq  (%rdi), %r10	# read val from src...
0x07a: 718d00000000000000   | 	jle     Loop		      # if so, goto Npos:
0x083: c0f00100000000000000 |   iaddq   $1, %rax		  # count++
0x08d:                      | Loop:
0x08d: 40a60000000000000000 |   rmmovq  %r10, (%rsi)	# ...and store it to dst
0x097: c0f2ffffffffffffffff |   iaddq   $-1, %rdx		  # len--
0x0a1: 6222                 | 	andq    %rdx,%rdx		  # len > 0?
0x0a3: 765a00000000000000   | 	jg      Inc			      # if so, goto Inc:
0x0ac: 62aa                 |   andq    %r10, %r10		# val <= 0?
0x0ae: 71c100000000000000   |   jle     Done		      # if so, goto Npos:
0x0b7: c0f00100000000000000 |   iaddq   $1, %rax		  # count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0c1:                      | Done:
0x0c1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0c2:                      | End:
                            | #/* $end ncopy-ys */
0x0c2:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x0c8:                      | 	.align 8
0x0c8:                      | src:
0x0c8: ffffffffffffffff     | 	.quad -1
0x0d0: 0200000000000000     | 	.quad 2
0x0d8: 0300000000000000     | 	.quad 3
0x0e0: fcffffffffffffff     | 	.quad -4
0x0e8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x0f0:                      | 	.align 16
0x0f0:                      | Predest:
0x0f0: fadebc0000000000     | 	.quad 0xbcdefa
0x0f8:                      | dest:
0x0f8: abefcd0000000000     | 	.quad 0xcdefab
0x100: abefcd0000000000     | 	.quad 0xcdefab
0x108: abefcd0000000000     | 	.quad 0xcdefab
0x110: abefcd0000000000     | 	.quad 0xcdefab
0x118:                      | Postdest:
0x118: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x120:                      | .align 8
                            | # Run time stack
0x120: 0000000000000000     | 	.quad 0
0x128: 0000000000000000     | 	.quad 0
0x130: 0000000000000000     | 	.quad 0
0x138: 0000000000000000     | 	.quad 0
0x140: 0000000000000000     | 	.quad 0
0x148: 0000000000000000     | 	.quad 0
0x150: 0000000000000000     | 	.quad 0
0x158: 0000000000000000     | 	.quad 0
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
                            | 
0x1a0:                      | Stack:
